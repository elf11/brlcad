First I checked if the bullet logic was working, without any callbacks, so I eliminated from the simphysics.cpp the 2 callbacks, broadphase callback and the nearphase callback. To see if the bullet logic worked without those, I tested the simulation for a couple of geometrical forms, cube-cube, sphere-cube and cube-spehere, rotated cube-sphere, rotated cube - cube. Everything worked and the falling object wasn't penetrating the ground plane.
Then I went further and tested the broadphase collision logic and the nearphase collision logic outside the simulate command in a standalone program, both of them worked properly, I tested them for the same geometries that I did test the simulate command without any callbacks too. I could only test for this geometry because bullet doesn't support arbitrary shapes, only a limited number of geometry like cubes, spheres, cyllinders. 
After testing the broadphase and the nearphase logic in a standalone project I tested first the broadphase callbacks in the simulate command. Everything went fine and bullet detected the collisions. Then I added the nearphase callback and the program logic ceased to exist. The simulation was running for a very long time and then it was aborted. 
Found that ray-tracing was causing all those problems. The nearphase callback calls the generate_manifolds() function that then shoots rays through the overlapping regions of the 2 colliding objects. The ray shooting logic was not alright, commented out most of it, and started working on a simpler way to shoot the rays for the manifolds. For the moment there is only one single ray that gets shot to the Z direction, at the middle of the penetrating object.
The ray is drawn on the screen and can be currently visualized if the simulate command is being run. 
Now, the idea is to investigate the region of overlap using a bunch of rays that covers it to the best extent possible and then get the biggest span in each dimension. In our case we should get 4 pairs of points, each in each pair, 1 point belongs to the cube the other to the gp. The point might be in the world space, and then they will match, or in the object space and then they will not match. For the moment we can't be sure. To investigate that region of overlap we need another standalone bullet test,  to see what bullet generates for a gp and a cube. We need to print out the values that bullet generates using its own algorithms and match that to the best extent possible. We need to report back 3 things
1. Point pairs
2. Normals
3. Penetration distance
So that's the plan, replicate what bullet generates. 
